#BFS
from  collections import deque
def bfs(v,adjlist):
    res=[]
    queue=deque()
    queue.append(0)#first need to append the starting node 
    visited=[0]*vertices
    while  queue:
        node=queue.popleft()
        res.append(node)
        visited[node]=1 
        for n in adjlist[node]:
            if not visited[n]:
                visited[n]=1 
                queue.append(n)
    print(res)

def adjacencyList(vertex,u,v):
    lists[u].append(v)
    lists[v].append(u)

vertices=4 
lists={i:[] for i in range(vertices)}
adjacencyList(vertices,0,1)
adjacencyList(vertices,0,2)
adjacencyList(vertices,1,2)
adjacencyList(vertices,2,3)
bfs(vertices,lists)

#DFS
from  collections import deque
def dfs(node,adjlist,visited,res):
    visited[node]=1
    res.append(node)
    for n in adjlist[node]:
        if not visited[n]:
            dfs(n,adjlist,visited,res)


def adjacencyList(vertex,u,v):
    lists[u].append(v)
    lists[v].append(u)

vertices=9
lists={i:[] for i in range(vertices)}
adjacencyList(vertices,1,2)
adjacencyList(vertices,1,3)
adjacencyList(vertices,2,5)
adjacencyList(vertices,2,6)
adjacencyList(vertices,3,4)
adjacencyList(vertices,3,7)
adjacencyList(vertices,4,8)
adjacencyList(vertices,8,7)
print(lists)

visited=[0]*vertices
res=[]
dfs(1,lists,visited,res)# Zero represent starting node ..it can be whatever
print(res)
